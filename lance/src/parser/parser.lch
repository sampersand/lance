import "lexer.lch"

struct Parser {
	lexer: Lexer,
	peeked: bool,
	_token: Token,
}

enum TokenKind {
	EOF: void,
	Number: void,
	String: void,
	Identifier: void,
	Symbol: str,
}

externf Parser_new: fn(Lexer): Parser
externf Parser.peek: fn(Parser): Token 
externf Parser.take: fn(Parser): Token 
externf Parser.next: fn(Parser): Token 
externf Parser.untake: fn(Parser, Token)
externf Parser.is_eof: fn(Parser): bool
externf Parser.error: fn(Parser, str): never

enum Option_Token { Some: Token, None: void }
externf Option_Token.is_some: fn(Option_Token): bool
externf Parser.guard: fn(Parser, TokenKind): Option_Token
externf Parser.guardkw: fn(Parser, str): bool
externf Parser.expectkw: fn(Parser, str, str)
externf Parser.guardident: fn(Parser): str
externf Parser.expectident: fn(Parser, str): str
