import 'variable.lch'
import 'value.lch'
import 'ast.lch'

global priv variables: [Variable]
fn init_variables() {
	let v: [Variable] = []
	set variables = v
}

fn Variable_new(name: str): Variable {
	let i = 0
	let len = variables.len()

	while i < len {
		if name == variables[i].name {
			return variables[i]
		}

		set i = i + 1
	}

	let value = Value::Null{}
	let var = Variable { name, assigned: false, value }
	do variables.insert(i, var)

	return var
}

fn Variable.run(): Value {
	if self.assigned {
		return self.value
	}

	do panic("Unassigned variable '" + self.name + "' executed!")
}

fn Variable.assign(value: Value) {
	set self.value = value
	set self.assigned = true
}

fn Variable.inspect(): str {
	return "Variable(" + self.name + ", " + (self.assigned ? self.value.inspect() : "<unassigned>") + ")"
}
