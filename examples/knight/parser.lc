import "parser.lch"
import "shared.lch"
import "value.lch"
import "function.lch"

fn Parser_new(str): Parser {
	return Parser { str, num: 0 }
}

fn priv Parser.is_eof(): bool {
	return self.str.length() <= self.num
}

fn priv Parser.peek(): str {
	return self.is_eof() ? "" : self.str[self.num]
}

fn priv Parser.advance() {
	do assert(self.num < self.str.length(), "parsed past the end?")

	set self.num = self.num + 1 
}

fn priv Parser.peek_advance(): str {
	let c = self.peek()
	do self.advance()
	return c
}

fn priv str.contains(c: str): bool {
	let i = 0

	while i < self.length() {
		if self[i] == c {
			return true
		}

		set i = i + 1
	}

	return false
}

fn priv Parser.strip() {
	loop {
		while " \n\t\r\f(){}[]:".contains(self.peek()) {
			do self.advance()
			do assert(!self.is_eof(), "out of bounds")
		}

		if self.peek() != '#' {
			break
		}

		while self.peek_advance() != "\n" {
			do assert(!self.is_eof(), "out of bounds")
		}
	}
}

fn priv str.isdigit(): bool {
	return ('0' <= self) && (self <= '9')
}

fn priv str.islower(): bool {
	return (('a' <= self) && (self <= 'z')) || (self == '_')
}

fn priv str.isupper(): bool {
	return (('A' <= self) && (self <= 'Z')) || (self == '_')
}

fn priv Parser.take_while(cond: fn(str): bool): str {
	let s = ''

	while cond(self.peek()) {
		set s = s + self.peek_advance()
	}

	return s
}

fn Parser.next(): Value {
	do self.strip()
	do assert(!self.is_eof(), "nothing left to parse");

	let c = self.peek()

	if c.isdigit() {
		return Value::num { _: self.take_while(str.isdigit).to_num() }
	}

	if c.islower() {
		return Value::Variable { _: Variable_new(self.take_while(str.islower)) }
	}

	if (c == "'") || (c == '"') {
		do self.advance()
		let s = ''

		while self.peek() != c {
			set s = s + self.peek_advance()
		}
		do self.advance()

		return Value::str { _: s }
	}

	if c.isupper() {
		do self.take_while(str.isupper)
	} else {
		do self.advance()
	}

	if c == 'T' { return Value::bool { _: true } }
	if c == 'F' { return Value::bool { _: false } }
	if c == 'N' { return Value::Null{} }

	let func = Function_lookup(c)
	let args: [Value] = []
	let i = 0

	while i < func.arity {
		do args.insert(args.length(), self.next())

		set i = i + 1
	}

	return Value::Ast { _: Ast { func, args } }
}
